// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String   @id @default(uuid()) @db.VarChar(36)
  idCardNumber   String   @unique @map("id_card_number") @db.VarChar(100)
  fullName       String   @map("fullname") @db.VarChar(100)
  dateOfBirth    DateTime @map("date_of_birth") @db.Date
  email          String   @db.VarChar(100)
  password       String   @db.VarChar(100)
  phoneNumber    String   @map("phone_number") @db.VarChar(15)
  referralCode   String?  @map("referral_code") @db.VarChar(20)
  totalUserPoint Int      @map("total_user_point")
  profilePicture String?  @map("profile_picture") @db.VarChar(100)

  purchase_orders PurchaseOrders[]
  user_points    UserPoint[]
  testimoni      Testimoni[]
  eventOrganizer EventOrganizer[]
  userRole       UserRole         @map("user_role")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("users")
}

enum UserRole {
  CUSTOMER
  EVENT_ORGANIZER
}

model UserPoint {
  id     String  @id @default(uuid()) @db.VarChar(36)
  userId String? @map("user_id") @db.VarChar(36)
  users  User?   @relation(fields: [userId], references: [id])
  points Int

  purchase_orders PurchaseOrders[]

  expiredAt DateTime  @map("expired_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("user_points")
}

model EventOrganizer {
  id          String  @id @default(uuid()) @db.VarChar(36)
  companyName String  @map("company_name") @db.VarChar(100)
  email       String  @db.VarChar(100)
  phoneNumber String? @map("phone_number") @db.VarChar(36)
  address     String?
  websiteUrl  String? @map("website_url")
  bankAccount String? @map("bank_account") @db.VarChar(36)
  userId      String  @unique @map("user_id") @db.VarChar(36)
  bannerUrl   String? @map("banner_url") @db.VarChar(200)

  coupon Coupon[]
  user   User     @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  Event     Event[]

  @@map("event_organizer")
}

model Event {
  id        String   @id @default(uuid()) @db.VarChar(36)
  eventName String   @map("event_name") @db.VarChar(100)
  category  Category
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")
  imageUrl  String   @map("image_url")

  eventOrganizerId String         @map("event_organizer_id") @db.VarChar(36)
  eventOrganizer   EventOrganizer @relation(fields: [eventOrganizerId], references: [id])

  venueId String @map("venue_id") @db.VarChar(36)
  venue   Venue  @relation(fields: [venueId], references: [id])

  description     String
  availableTicket Int    @map("available_ticket")
  price           Int

  purchase_orders PurchaseOrders[]
  testimoni       Testimoni[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@index([eventOrganizerId])
  @@index([eventName])
  @@index([category])
  @@index([deletedAt])
  @@map("event")
}

enum Category {
  MUSIC
  SPORT
  EDUCATION
}

model Venue {
  id            String @id @default(uuid()) @db.VarChar(36)
  venueName     String @map("venue_name") @db.VarChar(36)
  venueCapacity Int    @map("venue_capacity")
  address       String

  events Event[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("venue")
}

model Coupon {
  id            String       @id @default(uuid()) @db.VarChar(36)
  discountValue Int          @map("discount_value")
  provider_type providerType

  providerId String ?        @map("event_organizer_id") @db.VarChar(36)
  provider   EventOrganizer? @relation(fields: [providerId], references: [id])

  description     String
  availableCoupon Int

  purchase_orders PurchaseOrders[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("coupon")
}

enum providerType {
  APP
  EVENT_ORGANIZER
}

model PurchaseOrders {
  id       String @id @default(uuid()) @db.VarChar(36)

  userId String  @map("user_id") @db.VarChar(36)
  user   User    @relation(fields: [userId], references: [id])

  fullName String @map("fullname")
  email    String

  eventId String @map("event_id") @db.VarChar(36)
  event   Event  @relation(fields: [eventId], references: [id])

  quantity Int
  price    Int

  discountId String? @map("coupon_id") @db.VarChar(36)
  discount   Coupon? @relation(fields: [discountId], references: [id])

  UserPointsId String?    @map("user_points_id")
  user_points  UserPoint? @relation(fields: [UserPointsId], references: [id])

  finalPrice   Int       @map("final_price")
  paymentProof String?   @map("payment_proof")
  orderStatus  String    @map("order_status") @db.VarChar(36)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  expiredAt    DateTime  @map("expired_at")
  deletedAt    DateTime? @map("deleted_at")

  @@map("purchase_orders")
}

model Testimoni {
  id String @id @default(uuid()) @db.VarChar(36)

  userId String? @map("user_id") @db.VarChar(36)
  users  User?   @relation(fields: [userId], references: [id])

  eventId String? @map("event_id") @db.VarChar(36)
  event   Event?  @relation(fields: [eventId], references: [id])

  rating  Int
  comment String

  @@map("testimoni")
}
